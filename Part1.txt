Part 1: Discussion Questions


>>>Recursion

1. In your own words, what is recursion?
Answer: Recursion means a function calls itself. Python will put all function call in stack, 
      which means the last call will excute firstly.

2. Why is it necessary to have a base case?
Answer: A base case means when the function calls stop, so it's necessary.


>>>Graphs

1. What is a graph?
Answer: Graphs contain nodes and edges. nodes are basic units, edges connect any two nodes, 
      and edges are directed or undirected. Two nodes connected by a edge are called adjacent.  

2. How is a graph different from a tree?
Answer: Graphs are like trees, but they can contain cycles and directions. Trees are a kind of graphs.

3. Give an example of something that would be good to model with a graph.
Answer: Relationship of friends can be model with a undireted graph. 

>>>Performance of Different Data Structures

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.

1. Fill in the runtimes for the following actions for the table below:

Data Structure       Index   Search  Add-R   Add-L   Pop-L   Pop-R
Python List (Array)   O(1)     O(n)   O(1)    O(n)    O(n)    O(1)         
Linked List           O(n)     O(n)   O(1)    O(1)    O(1)    O(n)           
Doubly-Linked List    O(n)     O(n)   O(1)    O(1)    O(1)    O(1)    
Queue (as Array)       X        X     O(1)     X      O(n)     X
Queue (as LL or DLL)   X        X     O(1)     X      O(1)     X
Stack (as Array, 
       LL, or DLL)     X        X     O(1)     X       X      O(1)
Deque (as DLL)         X        X     O(1)    O(1)    O(1)    O(1)
             
*Index: Find an item in the structure when you know its position
*Search: Find an item in the structure when you know its data
*Add(R/L): Set a key in set/dictionary or add node to tree
*Pop(R/L): Remove a key or node

2. Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure          Get     Add      Delete  Iterate   Memory
Dictionary (Hash Map)   O(1)    O(1)     O(1)    O(n)      medium
Set (Hash Map)          O(1)    O(1)     O(1)    O(n)      medium      
Binary Search Tree      O(logn) O(logn)  O(logn) O(nlogn)  small          
Tree                    O(n)    O(logn)  O(1)    O(1)      small

*Get: Find an item in the structure
*Add: Set a key in set/dictionary or add node to tree
*Delete: Remove a key or node
*Iterate: Find next item in data structure
*Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)


>>>Sorting

1. Describe in words how the Bubble Sort algorithm works.
Answer: Iterate a list, 
        for each loop compaire two items from the beginning(index 0), 
        if left one is smaller    than right one, swich them, 
        if not, index move one step, and continue to compare next two items.
        Runtime is O(n^2)

2. Describe in words how the Merge Sort algorithm works.
Answer: Splite a list to half and half list using recursion 
        until the lists contains juest one item (ordered list).
        In each revursive loop, iterate two ordered lists, get first item, and compare them,
        put the smaller one to target list until one of the two lists are empty, and extend
        the last part of another list to the target list.

3. Describe in words how the Quick Sort algorithm works.
Answer: Choose  the middle item of a list as a ‘pivot’ saved as equal list 
        and append all the numbers lower than the pivot number to low list, append all the numbers bigger than the pivot to high list, and append equal number to qual list, and call this processing to sorte hight list and low list until the length of list is less than 2, return low list plus qual list and high list.
